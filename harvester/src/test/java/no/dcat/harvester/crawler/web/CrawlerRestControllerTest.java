package no.dcat.harvester.crawler.web;

import no.difi.dcat.datastore.domain.DcatSource;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.ArrayList;
import java.util.HashMap;

import static org.mockito.Mockito.*;

/**
 * Created by dask on 03.03.2017.
 */
//@RunWith(SpringRunner.class)
public class CrawlerRestControllerTest {
    public static final String miniDatasetBase64 = "QHByZWZpeCA6ICAgICAgPGh0dHA6Ly9kYXRhLmJycmVnLm5vL3ZvY2FiL3RlbXAvPiAuDQpAcHJlZml4IGQycnE6ICA8aHR0cDovL3d3dy53aXdpc3MuZnUtYmVybGluLmRlL3N1aGwvYml6ZXIvRDJSUS8wLjEjPiAuDQpAcHJlZml4IGFkbXM6ICA8aHR0cDovL3d3dy53My5vcmcvbnMvYWRtcyM+IC4NCkBwcmVmaXggb3dsOiAgIDxodHRwOi8vd3d3LnczLm9yZy8yMDAyLzA3L293bCM+IC4NCkBwcmVmaXggeHNkOiAgIDxodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSM+IC4NCkBwcmVmaXggcmRmczogIDxodHRwOi8vd3d3LnczLm9yZy8yMDAwLzAxL3JkZi1zY2hlbWEjPiAuDQpAcHJlZml4IHZjYXJkOiA8aHR0cDovL3d3dy53My5vcmcvMjAwNi92Y2FyZC9ucyM+IC4NCkBwcmVmaXggZGN0OiAgIDxodHRwOi8vcHVybC5vcmcvZGMvdGVybXMvPiAuDQpAcHJlZml4IHJkZjogICA8aHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIz4gLg0KQHByZWZpeCBhcGY6ICAgPGh0dHA6Ly9qZW5hLmFwYWNoZS5vcmcvQVJRL3Byb3BlcnR5Iz4gLg0KQHByZWZpeCBkY2F0bm86IDxodHRwOi8vZGlmaS5uby9kY2F0bm8jPiAuDQpAcHJlZml4IGRjYXQ6ICA8aHR0cDovL3d3dy53My5vcmcvbnMvZGNhdCM+IC4NCkBwcmVmaXggbWFwOiAgIDxmaWxlOi8vL3Vzci9sb2NhbC9zcmMvc2VtZXgvbWFwcGluZy5uMyM+IC4NCkBwcmVmaXggcHJvdjogIDxodHRwOi8vd3d3LnczLm9yZy9ucy9wcm92Iz4gLg0KQHByZWZpeCBmb2FmOiAgPGh0dHA6Ly94bWxucy5jb20vZm9hZi8wLjEvPiAuDQoNCjxodHRwOi8vZGF0YS5icnJlZy5uby9kYXRha2F0YWxvZy9kYXRhc2V0LzE3Pg0KICAgICAgICBhICAgICAgICAgICAgICAgIGRjYXQ6RGF0YXNldCA7DQogICAgICAgIGRjdDpkZXNjcmlwdGlvbiAgIkFkcmVzc2VyZWdpc3RlcmV0IChBUikgZXIgZXQgZmVsbGVzIG5hc2pvbmFsdCByZWdpc3RlciBmb3IgcHJlc2lzIGFkcmVzc2VyaW5nIHZlZCB1dHZla3NsaW5nIGF2IGhlbHNlb3BwbHlzbmluZ2VyIHNvbSBzZW5kZXMgZWxla3Ryb25pc2sgZWxsZXIgcGVyIHBvc3QgaW5uZW4gaGVsc2UtIG9nIG9tc29yZ3NzZWt0b3Jlbi4iQG5vLW5iIDsNCiAgICAgICAgZGN0OmlkZW50aWZpZXIgICAiMTciIDsNCiAgICAgICAgZGN0OnB1Ymxpc2hlciAgICA8aHR0cDovL2RhdGEuYnJyZWcubm8vZW5oZXRzcmVnaXN0ZXJldC9lbmhldC9FaGVsc2U+IDsNCiAgICAgICAgZGN0OnRpdGxlICAgICAgICAiQWRyZXNzZXJlZ2lzdGVyZXQiQG5vIDsNCiAgICAgICAgZGNhdDp0aGVtZSAgICAgICA8aHR0cDovL3B1YmxpY2F0aW9ucy5ldXJvcGEuZXUvcmVzb3VyY2UvYXV0aG9yaXR5L2RhdGEtdGhlbWUvR09WRT4gOw0KICAgICAgICBmb2FmOnBhZ2UgICAgICAgIDxodHRwczovL3JlZ2lzdGVyLXdlYi50ZXN0Lm5obi5uby8+IC4NCg0KPGh0dHA6Ly9kYXRhLmJycmVnLm5vL2RhdGFrYXRhbG9nL2RhdGFzZXQvMjc+DQogICAgICAgIGEgICAgICAgICAgICAgICAgZGNhdDpEYXRhc2V0IDsNCiAgICAgICAgZGN0OmRlc2NyaXB0aW9uICAiRGF0YXNldCB3aXRoIGVuZ2xpc2ggZGVzY3JpcHRpb24uIkBlbiA7DQogICAgICAgIGRjdDppZGVudGlmaWVyICAgIjE3IiA7DQogICAgICAgIGRjdDpwdWJsaXNoZXIgICAgPGh0dHA6Ly9kYXRhLmJycmVnLm5vL2VuaGV0c3JlZ2lzdGVyZXQvZW5oZXQvQnJyZWc+IDsNCiAgICAgICAgZGN0OnRpdGxlICAgICAgICAiRW5nbGlzaERhdGEiQGVuIDsNCiAgICAgICAgZGNhdDp0aGVtZSAgICAgICA8aHR0cDovL3B1YmxpY2F0aW9ucy5ldXJvcGEuZXUvcmVzb3VyY2UvYXV0aG9yaXR5L2RhdGEtdGhlbWUvR09WRT4gOw0KICAgICAgICBmb2FmOnBhZ2UgICAgICAgIDxodHRwczovL3JlZ2lzdGVyLXdlYi50ZXN0Lm5obi5uby8+IC4NCg0KPGh0dHA6Ly9kYXRhLmJycmVnLm5vL2RhdGFrYXRhbG9nL2RhdGFzZXQvNz4NCiAgICAgICAgYSAgICAgICAgICAgICAgICAgICAgICAgIGRjYXQ6RGF0YXNldCA7DQogICAgICAgIGRjdDphY2Nlc3NSaWdodHMgICAgICAgICA8aHR0cDovL3B1YmxpY2F0aW9ucy5ldXJvcGEuZXUvcmVzb3VyY2UvYXV0aG9yaXR5L2FjY2Vzcy1yaWdodC9QVUJMSUM+IDsNCiAgICAgICAgZGN0OmFjY3J1YWxQZXJpb2RpY2l0eSAgPGh0dHA6Ly9wdWJsaWNhdGlvbnMuZXVyb3BhLmV1L3Jlc291cmNlL2F1dGhvcml0eS9mcmVxdWVuY3kvREFJTFk+IDsNCiAgICAgICAgZGN0OmRlc2NyaXB0aW9uICAgICAgICAgICJQYXJ0aXJlZ2lzdGVyZXQgZXIgZWl0IHJlZ2lzdGVyIG92ZXIgcG9saXRpc2tlIHBhcnRpLCBvZyBob3Z1ZGZvcm3DpWxldCBlciDDpSBnaSBwYXJ0aSBow7h2ZSB0aWwgw6Ugc2thZmZlIHNlZyBlaW5lcmV0dCB0aWwgZWl0IHBhcnRpbmFtbi4gXG5cblBhcnRpcmVnaXN0ZXJldCBpbm5laGVsZCBvcHBseXNuaW5nYXIgb20gbmFtbmV0LCBvcmdhbmlzYXNqb25zbnVtbWVyZXQsIGFkcmVzc2Egb2cga29udGFrdHBlcnNvbmVuIHRpbCBwYXJ0aWV0IHNvbSBlciByZWdpc3RyZXJ0IGkgRWluaW5nc3JlZ2lzdGVyZXQuIEkgdGlsbGVnZyBza2FsIFBhcnRpcmVnaXN0ZXJldCBpbm5laGFsZGUgb3BwbHlzbmluZ2FyIG9tIHBhcnRpZXQgc2l0dCB1dMO4dmFuZGUgb3JnYW4gc29tIGV0dGVyIHZhbGxvdmEgc2thbCByZXByZXNlbnRlcmUgcGFydGlldCBvdmVyZm9yIHZhbHN0eXJlc21ha3RlbmUuIFZlZCBmw7hyZWJ1aW5nYSBhdiB2YWwgbGVnZyB2YWxzdHlyZXNtYWt0ZW5lIHRpbCBncnVubiBkZWkgb3BwbHlzbmluZ2FuZSBzb20gZXIgcmVnaXN0cmVydCBpIFBhcnRpcmVnaXN0ZXJldCBwZXIgMzEuIG1hcnMgaSB2YWzDpXJldC4iIDsNCiAgICAgICAgZGN0OmlkZW50aWZpZXIgICAgICAgICAgICI3IiA7DQogICAgICAgIGRjdDpwcm92ZW5hbmNlICAgICAgICAgICA8aHR0cDovL2RhdGEuYnJyZWcubm8vZGF0YWthdGFsb2cvcHJvdmluZW5zL3ZlZHRhaz4gOw0KICAgICAgICBkY3Q6cHVibGlzaGVyICAgICAgICAgICAgPGh0dHA6Ly9kYXRhLmJycmVnLm5vL2VuaGV0c3JlZ2lzdGVyZXQvZW5oZXQvQnJyZWc+IDsNCiAgICAgICAgZGN0OnNwYXRpYWwgICAgICAgICAgICAgIDxodHRwOi8vc3dzLmdlb25hbWVzLm9yZy8zMTQ0MDk2Lz4gOw0KICAgICAgICBkY3Q6c3ViamVjdCAgICAgICAgICAgICAgPGZpbGU6Ly8vdXNyL2xvY2FsL3NyYy9kYXRhL2RjYXQvbWFwcGVyLzA+IDsNCiAgICAgICAgZGN0OnRpdGxlICAgICAgICAgICAgICAgICJQYXJ0aXJlZ2lzdGVyZXQiIDsNCiAgICAgICAgZGNhdDpjb250YWN0UG9pbnQgICAgICAgIDxodHRwOi8vZGF0YS5icnJlZy5uby9kYXRha2F0YWxvZy9rb250YWt0cHVua3QvND4gOw0KICAgICAgICBkY2F0OmRpc3RyaXV0aW9uICAgICAgICAgPGh0dHA6Ly9kYXRhLmJycmVnLm5vL2RhdGFrYXRhbG9nL2Rpc3RpYnVzam9uLzM+IDsNCiAgICAgICAgZGNhdDprZXl3b3JkICAgICAgICAgICAgICJQYXJ0aW5hdm4iICwgIlV0w7h2ZW5kZSBvcmdhbiIgLCAiUGFydGkiICwgIk9yZ2FuaXNhc2pvbnNudW1tZXIiICwgIktvbnRha3RwZXJzb24iIDsNCiAgICAgICAgZGNhdDp0aGVtZSAgICAgICAgICAgICAgIDxodHRwOi8vcHVibGljYXRpb25zLmV1cm9wYS5ldS9yZXNvdXJjZS9hdXRob3JpdHkvZGF0YS10aGVtZS9HT1ZFPiAuDQoNCg0KDQo8aHR0cDovL2RhdGEuYnJyZWcubm8vZW5oZXRzcmVnaXN0ZXJldC9lbmhldC9CcnJlZz4NCiAgICAgICAgYSAgICAgICAgICAgICAgIGZvYWY6QWdlbnQgOw0KICAgICAgICBkY3Q6aWRlbnRpZmllciAgIkJycmVnIiA7DQogICAgICAgIGZvYWY6bmFtZSAgICAgICAiQnLDuG5uw7h5c3VuZHJlZ2lzdHJlbmUiIC4NCg0KZGN0OnRpdGxlICBhICAgIG93bDpEYXRhdHlwZVByb3BlcnR5IC4NCg0KZGN0OnJlbGF0aW9uICBhICBvd2w6T2JqZWN0UHJvcGVydHkgLg0KDQpkY2F0bm86YWNjZXNzUmlnaHRzQ29tbWVudA0KICAgICAgICBhICAgICAgIG93bDpEYXRhdHlwZVByb3BlcnR5IC4NCg0KZGN0OnB1Ymxpc2hlciAgYSAgb3dsOk9iamVjdFByb3BlcnR5IC4NCg0KZGNhdDpkaXN0cml1dGlvbiAgYSAgb3dsOk9iamVjdFByb3BlcnR5IC4NCg0KYWRtczppZGVudGlmaWVyICBhICBvd2w6T2JqZWN0UHJvcGVydHkgLg0KDQpkY3Q6aWRlbnRpZmllciAgYSAgb3dsOkRhdGF0eXBlUHJvcGVydHkgLg0KDQp2Y2FyZDp0ZWxlZm9uICBhICBvd2w6T2JqZWN0UHJvcGVydHkgLg0KDQo8aHR0cDovL2RhdGEuYnJyZWcubm8vZGF0YWthdGFsb2cva2F0YWxvZy8zPg0KICAgICAgICBhICAgICAgICAgICAgICAgIGRjYXQ6Q2F0YWxvZyA7DQogICAgICAgIGRjdDpkZXNjcmlwdGlvbiAgIk1pbmlrYXRhbG9nIGZvciB0ZXN0Zm9ybcOlbCIgOw0KICAgICAgICBkY3Q6cHVibGlzaGVyICAgIDxodHRwOi8vZGF0YS5icnJlZy5uby9lbmhldHNyZWdpc3RlcmV0L2VuaGV0L0JycmVnPiA7DQogICAgICAgIGRjdDp0aXRsZSAgICAgICAgIk1pbmlrYXRhbG9nIiA7DQogICAgICAgIGRjYXQ6ZGF0YXNldCAgICAgPGh0dHA6Ly9kYXRhLmJycmVnLm5vL2RhdGFrYXRhbG9nL2RhdGFzZXQvMTc+ICwgPGh0dHA6Ly9kYXRhLmJycmVnLm5vL2RhdGFrYXRhbG9nL2RhdGFzZXQvNz4sIDxodHRwOi8vZGF0YS5icnJlZy5uby9kYXRha2F0YWxvZy9kYXRhc2V0LzI3PiAuDQoNCg0KdmNhcmQ6b3JnYW5pemF0aW9uLXVuaXQNCiAgICAgICAgYSAgICAgICBvd2w6RGF0YXR5cGVQcm9wZXJ0eSAuDQoNCnZjYXJkOk9yZ2FuaXphdGlvbiAgYSAgb3dsOkNsYXNzIC4NCg0KZGNhdDpDYXRhbG9nICBhICBvd2w6Q2xhc3MgLg0KDQpmb2FmOm5hbWUgIGEgICAgb3dsOkRhdGF0eXBlUHJvcGVydHkgLg0KDQo8aHR0cDovL2RhdGEuYnJyZWcubm8vZW5oZXRzcmVnaXN0ZXJldC9lbmhldC9FaGVsc2U+DQogICAgICAgIGEgICAgICAgICAgICAgICBmb2FmOkFnZW50IDsNCiAgICAgICAgZGN0OmlkZW50aWZpZXIgICJFaGVsc2UiIDsNCiAgICAgICAgZm9hZjpuYW1lICAgICAgICJEaXJla3RvcmF0ZXQgZm9yIGUtSGVsc2UiIC4NCg0KZGN0OmlzVmVyc2lvbk9mICBhICBvd2w6T2JqZWN0UHJvcGVydHkgLg0KDQpkY2F0OmNvbnRhY3RQb2ludCAgYSAgb3dsOk9iamVjdFByb3BlcnR5IC4NCg0KZGNhdDp0aGVtZSAgYSAgIG93bDpPYmplY3RQcm9wZXJ0eSAuDQoNCmZvYWY6QWdlbnQgIGEgICBvd2w6Q2xhc3MgLg0KDQpkY3Q6UHJvdmVuYW5jZVN0YXRlbWVudA0KICAgICAgICBhICAgICAgIG93bDpDbGFzcyAuDQoNCnZjYXJkOmVtYWlsICBhICBvd2w6T2JqZWN0UHJvcGVydHkgLg0KDQpkY3Q6aXNzdWVkICBhICAgb3dsOkRhdGF0eXBlUHJvcGVydHkgLg0KDQpwcm92Ondhc0dlbmVyYXRlZEJ5ICBhICBvd2w6RGF0YXR5cGVQcm9wZXJ0eSAuDQoNCmRjdDpwcm92ZW5hbmNlICBhICBvd2w6T2JqZWN0UHJvcGVydHkgLg0KDQpkY3Q6ZGVzY3JpcHRpb24gIGEgIG93bDpEYXRhdHlwZVByb3BlcnR5IC4NCg0KZGN0Omxhbmd1YWdlICBhICBvd2w6T2JqZWN0UHJvcGVydHkgLg0KDQpkY3Q6YWNjcnVhbFBlcmlvZGljaXR5DQogICAgICAgIGEgICAgICAgb3dsOk9iamVjdFByb3BlcnR5IC4NCg0KZGNhdDpEYXRhc2V0ICBhICBvd2w6Q2xhc3MgLg0KDQo8aHR0cDovL2RhdGEuYnJyZWcubm8vZW5oZXRzcmVnaXN0ZXJldC9wcm92aW5lbmNlL3ZlZHRhaz4NCiAgICAgICAgYSAgICAgICAgICAgICAgICAgICAgZGN0OlByb3ZlbmFuY2VTdGF0ZW1lbnQgOw0KICAgICAgICBwcm92Ondhc0dlbmVyYXRlZEJ5ICAidmVkdGFrIiAuDQo=";

    CrawlerRestController crawlerController;
    @Before
    public void setup() {
        crawlerController = new CrawlerRestController();

    }

    /**
     * Test that empty list of empty dcat sources actually runs
     *
     * @throws Throwable
     */
    @Test
    public void harvestAll() throws Throwable {
        CrawlerRestController spy = spy(crawlerController);
        doNothing().when(spy).harvestAllCodes(true);
        doReturn(new ArrayList<DcatSource>()).when(spy).getDcatSources();

        spy.harvestAllDcatSources();
    }



    @Test
    public void loadOK() throws  Throwable {
        CrawlerRestController spy = spy(crawlerController);
        doReturn(new ArrayList<String>()).when(spy).doCrawl(any());

        spy.load("testfile.ttl", "data:," +miniDatasetBase64);

    }
}
