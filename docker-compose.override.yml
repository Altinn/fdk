version: "3"

services:
### external modules
  elasticsearch5:
    volumes:
      - ./data/esdata5:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - cluster.name=elasticsearch
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m

  fuseki:
    build: ./applications/fuseki
    volumes:
      - ./data/fuseki:/etc/fuseki/databases/
    ports:
      - "3030:8080"

  postgres:
    restart: always
    volumes:
      - /var/lib/postgresql/data
    ports:
      - "5432:5432"

  sso:
    build: ./applications/sso
    volumes:
      - ./applications/sso/export:/tmp/keycloak/export
# import and deployments are copied in Dockerfile, but alternatively, they can be linked:
#      - ./applications/sso/import:/tmp/keycloak/import
# cp libraries/keycloak-user-storage-rest/target/keycloak-user-storage-rest.jar applications-external/sso/deployments/
#      - ./applications/sso/deployments:/opt/jboss/keycloak/standalone/deployments
#    environment:
#      - KEYCLOAK_LOGLEVEL=DEBUG
    ports:
      - "8084:8080"

### ingress modules
  nginx-search:
    build: ./applications/nginx-search
    ports:
      - "8080:8080"

  nginx-registration:
    build: ./applications/nginx-registration

  nginx-registration-ssl:
    build: ./applications/nginx-registration-ssl
    image: dcatno/nginx-registration-ssl:latest
    ports:
      - "8098:443"
    depends_on:
      - nginx-registration
      - registration-react

### external service proxies
  nginx-altinn-proxy:
    build: ./applications/nginx-altinn-proxy
    ports:
      - "8126:8080"

#  nginx-altinn-proxy-mock:
#    build: ./applications/nginx-altinn-proxy-mock
#    ports:
#      - "8128:8080"

### nodejs modules

  search:
    build: ./applications/search
    command: npm start
    ports:
      - "3000:3000"
    volumes:
      - ./applications/search/src:/usr/src/app/src
    environment:
      - REDUX_LOG

  registration-react:
    build: ./applications/registration-react
    command: npm start
    ports:
      - "4300:4300"
    volumes:
      - ./applications/registration-react/src:/usr/src/app/src
    environment:
      - REDUX_LOG
      - CONCEPT_REGISTRATION_API_HOST=http://localhost:8100
      - CONCEPT_REGISTRATION_HOST=http://localhost:8083

### java modules
  api-cat:
    ports:
      - "8102:8080"
    environment:
      - JAVA_OPTS= -ea -Djava.security.egd=file:/dev/./urandom -Xmx256M -Dspring.profiles.active=docker
      - LOG_LEVEL
      - LOG_FORMAT=compact

  concept-cat:
    ports:
      - "8104:8080"
    environment:
      - JAVA_OPTS=-Djava.security.egd=file:/dev/./urandom -Xmx256M -Dspring.profiles.active=docker
      - LOG_LEVEL

  informationmodel-cat:
    ports:
      - "8108:8080"
    environment:
    - JAVA_OPTS=-Djava.security.egd=file:/dev/./urandom -Xmx512M -Dspring.profiles.active=docker
    - LOG_LEVEL

  harvester:
    ports:
      - "8082:8080"
    environment:
      - JAVA_OPTS= -ea -Djava.security.egd=file:/dev/./urandom -Xmx256M -Dspring.profiles.active=docker
      - harvester_adminUsername=test_admin
      - harvester_adminPassword=password

  harvester-api:
    ports:
      - "8106:8080"
    environment:
      - JAVA_OPTS= -ea -Djava.security.egd=file:/dev/./urandom -Xmx1024M -Dspring.profiles.active=docker
      - application.crawlerThreadPoolSize=2
      - harvestRecordRetentionDays=30
      - LOG_FORMAT=compact

  reference-data:
    ports:
      - "8112:8080"
    environment:
      - JAVA_OPTS=-Djava.security.egd=file:/dev/./urandom -Xmx256M -Dspring.profiles.active=docker
      - FDK_SQL_JDBC_CONNECTION=jdbc:postgresql://postgres:5432/postgres?currentSchema=fdkreference
      - FDK_SQL_USERNAME=postgres
      - FDK_SQL_PASSWORD=password

  registration-api:
    ports:
      - "8114:8080"
    environment:
      - JAVA_OPTS= -ea -Djava.security.egd=file:/dev/./urandom -Xmx256M -Dspring.profiles.active=docker
      - registrationApi_altinnServiceUrl=http://registration-auth:8080/
      - registrationApi_apikey=${registrationApi_apikey}
      - registrationApi_clientSSLCertificateKeystoreLocation=conf/dummy-client-SSL-cert.p12
      - registrationApi_clientSSLCertificateKeystorePassword=password
      - registrationApi_harvesterUsername=test_admin
      - registrationApi_harvesterPassword=password
      - registrationApi_ipKeyPassword=${registrationApi_ipKeyPassword}
      - registrationApi_ipStorePassword=${registrationApi_ipStorePassword}
      - LOG_LEVEL

  search-api:
    ports:
      - "8118:8080"
    environment:
      - JAVA_OPTS= -ea -Djava.security.egd=file:/dev/./urandom -Xmx256M -Dspring.profiles.active=docker


### test and mock modules
  registration-auth:
    ports:
      - "8116:8080"
    environment:
      - JAVA_OPTS= -ea -Djava.security.egd=file:/dev/./urandom -Xmx256M -Dspring.profiles.active=docker

  e2e:
    build: ./applications/e2e
    volumes:
      - ./applications/e2e/test:/usr/src/app/test
      - ./applications/e2e/reports:/usr/src/app/reports
